{% comment %} Occasions Manager - Clean Implementation {% endcomment %}

<div class="occasions-manager" id="occasions-manager-{{ block.id }}" data-api-url="{{ block.settings.api_url | escape }}">

  {% if customer %}
    {%- comment -%} 1. OCCASION SUMMARY - Nicely formatted cards {%- endcomment -%}
    <div class="occasions-card">
      <h3>{{ block.settings.display_heading | default: "My Occasions" }}</h3>
      
      <div class="occasions-grid" id="occasions-grid-{{ block.id }}">
        {% for occasion in customer.metafields.custom.my_occasions.value limit:10 %}
          {% assign day = occasion.date | date: "%-d" %}
          {% assign month = occasion.date | date: "%B" %}
          {% assign formatted_date = day | append: ' ' | append: month %}
          
          <div class="occasion-item">
            <div class="occasion-content">
              <h4>{{ occasion.occasion_name }}</h4>
              <p class="occasion-date">{{ formatted_date }}</p>
              <!-- Added type display back to show occasion type -->
              {% if occasion.type %}
                <p class="occasion-type">{{ occasion.type }}</p>
              {% endif %}
            </div>
            
            <button type="button" class="edit-btn" 
                    data-occasion-id="{{ occasion.id }}"
                    data-occasion-date="{{ occasion.date | date: '%Y-%m-%d' }}"
                    data-occasion-name="{{ occasion.occasion_name }}"
                    data-occasion-type="{{ occasion.type }}">
              ⋯
            </button>
            
            <!-- Updated gift URL logic to match occasion type with settings -->
            {% assign gift_url = block.settings.default_gift_url %}
            {% if occasion.type == block.settings.occasion_type_1 %}
              {% assign gift_url = block.settings.gift_url_1 %}
            {% elsif occasion.type == block.settings.occasion_type_2 %}
              {% assign gift_url = block.settings.gift_url_2 %}
            {% elsif occasion.type == block.settings.occasion_type_3 %}
              {% assign gift_url = block.settings.gift_url_3 %}
            {% elsif occasion.type == block.settings.occasion_type_4 %}
              {% assign gift_url = block.settings.gift_url_4 %}
            {% elsif occasion.type == block.settings.occasion_type_5 %}
              {% assign gift_url = block.settings.gift_url_5 %}
            {% endif %}
            
            {% if gift_url != blank %}
              <button class="gift-btn" onclick="window.open('{{ gift_url }}', '_blank')">
                Find a gift for {{ formatted_date }}
              </button>
            {% endif %}
          </div>
        {% endfor %}
        
        {% if customer.metafields.custom.my_occasions.value.size == 0 %}
          <p>No occasions found.</p>
        {% endif %}
        
        <button class="add-btn" onclick="openAddForm{{ block.id }}()">+ Add</button>
      </div>
    </div>

    {%- comment -%} 2. ADD OCCASION POPUP FORM {%- endcomment -%}
    <div class="modal-overlay" id="add-modal-{{ block.id }}" style="display:none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Add Occasion Reminder</h3>
          <button onclick="closeAddForm{{ block.id }}()">×</button>
        </div>
        
        <div class="greeting-box">
          <p>Hi {{ customer.first_name }}.</p>
          <p class="pressie-message" id="pressie-message-{{ block.id }}"></p>
        </div>
        
        <form id="add-form-{{ block.id }}">
          <div class="form-group">
            <label>Date *</label>
            <input type="date" class="event-date" required>
          </div>
          
          <!-- Added type dropdown for add form with settings-based options -->
          <div class="form-group">
            <label>Type *</label>
            <select class="occasion-type" required>
              <option value="">Select type</option>
              {% if block.settings.occasion_type_1 != blank %}
                <option value="{{ block.settings.occasion_type_1 }}">{{ block.settings.occasion_type_1 }}</option>
              {% endif %}
              {% if block.settings.occasion_type_2 != blank %}
                <option value="{{ block.settings.occasion_type_2 }}">{{ block.settings.occasion_type_2 }}</option>
              {% endif %}
              {% if block.settings.occasion_type_3 != blank %}
                <option value="{{ block.settings.occasion_type_3 }}">{{ block.settings.occasion_type_3 }}</option>
              {% endif %}
              {% if block.settings.occasion_type_4 != blank %}
                <option value="{{ block.settings.occasion_type_4 }}">{{ block.settings.occasion_type_4 }}</option>
              {% endif %}
              {% if block.settings.occasion_type_5 != blank %}
                <option value="{{ block.settings.occasion_type_5 }}">{{ block.settings.occasion_type_5 }}</option>
              {% endif %}
              <option value="Other">Other</option>
            </select>
          </div>
          
          <div class="form-group">
            <label>Occasion Name *</label>
            <input type="text" class="occasion-name" placeholder="Enter occasion name" required>
          </div>
          
          <button type="submit" class="add-submit-btn" disabled>+ Add</button>
          <div class="form-message"></div>
        </form>
      </div>
    </div>

    {%- comment -%} 3. EDIT OCCASION POPUP FORM {%- endcomment -%}
    <div class="modal-overlay" id="edit-modal-{{ block.id }}" style="display:none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Edit Occasion</h3>
          <button onclick="closeEditForm{{ block.id }}()">×</button>
        </div>
        
        <div class="greeting-box">
          <p>Hi {{ customer.first_name }}.</p>
        </div>
        
        <form id="edit-form-{{ block.id }}">
          <input type="hidden" class="edit-occasion-id">
          
          <div class="form-group">
            <label>Date *</label>
            <input type="date" class="edit-event-date" required>
          </div>
          
          <!-- Added free text input for type in edit form -->
          <div class="form-group">
            <label>Type</label>
            <input type="text" class="edit-occasion-type" placeholder="Enter occasion type">
          </div>
          
          <div class="form-group">
            <label>Occasion Name *</label>
            <input type="text" class="edit-occasion-name" required>
          </div>

          <button type="submit" class="save-btn">Save</button>
          <button type="button" class="delete-btn" onclick="deleteOccasion{{ block.id }}()">Delete Occasion</button>
          <div class="edit-form-message"></div>
        </form>
      </div>
    </div>

  {% else %}
    <div class="login-required">
      <p>Please <a href="{{ routes.account_login_url }}">log in</a> to manage your occasions.</p>
    </div>
  {% endif %}
</div>

{%- comment -%} 4. SCRIPT TO SORT CARDS AND HANDLE FORMS {%- endcomment -%}
<script>
(function() {
  const blockId = '{{ block.id }}';
  const customerId = '{{ customer.id }}';
  const apiUrl = '{{ block.settings.api_url | escape }}';
  
  let occasionCount = {{ customer.metafields.custom.my_occasions.value.size | default: 0 }};
  
  function openAddForm() {
    updatePressieMessage();
    document.getElementById('add-modal-' + blockId).style.display = 'flex';
  }
  
  function closeAddForm() {
    document.getElementById('add-modal-' + blockId).style.display = 'none';
  }
  
  function closeEditForm() {
    document.getElementById('edit-modal-' + blockId).style.display = 'none';
  }
  
  async function deleteOccasion() {
    const editForm = document.getElementById('edit-form-' + blockId);
    const occasionId = editForm.querySelector('.edit-occasion-id').value;
    
    if (!occasionId || occasionId === 'undefined' || occasionId === '') {
      editForm.querySelector('.edit-form-message').textContent = 'Delete failed: Invalid occasion ID';
      return;
    }
    
    let formattedId = occasionId;
    if (!occasionId.startsWith('gid://shopify/Metaobject/')) {
      formattedId = `gid://shopify/Metaobject/${occasionId}`;
    }
    
    try {
      const response = await fetch('/api/change-metaobject', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: formattedId,
          operation: 'delete',
          customer: customerId
        })
      });
      
      if (response.ok) {
        occasionCount--;
        closeEditForm();
        location.reload();
      } else {
        const error = await response.json();
        console.error('Delete error:', error);
        editForm.querySelector('.edit-form-message').textContent = 'Delete failed: ' + (error.error || 'Server error');
      }
    } catch (error) {
      console.error('Delete network error:', error);
      editForm.querySelector('.edit-form-message').textContent = 'Delete failed: Network error - check API endpoint';
    }
  }
  
  window['openAddForm' + blockId] = openAddForm;
  window['closeAddForm' + blockId] = closeAddForm;
  window['closeEditForm' + blockId] = closeEditForm;
  window['deleteOccasion' + blockId] = deleteOccasion;
  
  function sortOccasions() {
    const grid = document.getElementById('occasions-grid-' + blockId);
    if (!grid) return;
    
    const items = Array.from(grid.querySelectorAll('.occasion-item'));
    
    items.sort((a, b) => {
      const dateA = new Date(a.querySelector('.edit-btn').dataset.occasionDate);
      const dateB = new Date(b.querySelector('.edit-btn').dataset.occasionDate);
      return dateA - dateB;
    });
    
    items.forEach(item => grid.appendChild(item));
  }
  
  function updatePressieMessage() {
    const messageEl = document.getElementById('pressie-message-' + blockId);
    if (!messageEl) return;
    
    if (occasionCount === 0) {
      messageEl.textContent = 'Add 3 occasion reminders and earn Pressie Points.';
    } else if (occasionCount < 3) {
      messageEl.textContent = `You have ${occasionCount} occasion reminder${occasionCount === 1 ? '' : 's'} saved, add 3 to earn Pressie Points.`;
    } else {
      messageEl.textContent = `Great job, you have ${occasionCount} occasion reminders saved!`;
    }
  }
  
  function setupForms() {
    const addForm = document.getElementById('add-form-' + blockId);
    const editForm = document.getElementById('edit-form-' + blockId);
    
    if (addForm) {
      const submitBtn = addForm.querySelector('.add-submit-btn');
      
      addForm.addEventListener('input', function() {
        const isValid = addForm.querySelector('.event-date').value &&
                       addForm.querySelector('.occasion-type').value &&
                       addForm.querySelector('.occasion-name').value;
        submitBtn.disabled = !isValid;
      });
      
      addForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = {
          customer: customerId,
          date: addForm.querySelector('.event-date').value,
          type: addForm.querySelector('.occasion-type').value,
          occasion_name: addForm.querySelector('.occasion-name').value
        };
        
        try {
          const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
          });
          
          if (response.ok) {
            occasionCount++;
            updatePressieMessage();
            if (occasionCount >= 10) {
              closeAddForm();
            } else {
              addForm.reset();
              submitBtn.disabled = true;
            }
            location.reload();
          } else {
            const error = await response.json();
            console.error('Add error:', error);
            addForm.querySelector('.form-message').textContent = 'Error: ' + (error.error || 'Unknown error');
          }
        } catch (error) {
          console.error('Add error:', error);
          addForm.querySelector('.form-message').textContent = 'Error: Network error';
        }
      });
    }
    
    if (editForm) {
      editForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = {
          id: editForm.querySelector('.edit-occasion-id').value,
          customer: customerId,
          date: editForm.querySelector('.edit-event-date').value,
          type: editForm.querySelector('.edit-occasion-type').value,
          occasion_name: editForm.querySelector('.edit-occasion-name').value,
          operation: 'update'
        };
        
        try {
          const response = await fetch('/api/change-metaobject', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
          });
          
          if (response.ok) {
            closeEditForm();
            location.reload();
          } else {
            const error = await response.json();
            console.error('Update error:', error);
            editForm.querySelector('.edit-form-message').textContent = 'Update failed: ' + (error.error || 'Unknown error');
          }
        } catch (error) {
          console.error('Update error:', error);
          editForm.querySelector('.edit-form-message').textContent = 'Update failed: Network error';
        }
      });
    }
  }
  
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('edit-btn')) {
      const data = e.target.dataset;
      const editForm = document.getElementById('edit-form-' + blockId);
      
      if (editForm) {
        editForm.querySelector('.edit-occasion-id').value = data.occasionId || '';
        editForm.querySelector('.edit-event-date').value = data.occasionDate || '';
        editForm.querySelector('.edit-occasion-name').value = data.occasionName || '';
        editForm.querySelector('.edit-occasion-type').value = data.occasionType || '';
        
        document.getElementById('edit-modal-' + blockId).style.display = 'flex';
      }
    }
  });
  
  // Initialize everything when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    sortOccasions();
    setupForms();
    updatePressieMessage();
  });
})();
</script>

{%- comment -%} 5. SCHEMA FOR SETTINGS {%- endcomment -%}
{% schema %}
{
  "name": "Occasion Reminders",
  "settings": [
    { "type": "text", "id": "api_url", "label": "API URL", "default": "/api/create-metaobject" },
    { "type": "text", "id": "display_heading", "label": "Display Heading", "default": "My Occasions" },
    { "type": "text", "id": "occasion_type_1", "label": "Occasion Type 1", "default": "Birthday" },
    { "type": "url", "id": "gift_url_1", "label": "Gift URL 1" },
    { "type": "text", "id": "occasion_type_2", "label": "Occasion Type 2", "default": "Anniversary" },
    { "type": "url", "id": "gift_url_2", "label": "Gift URL 2" },
    { "type": "text", "id": "occasion_type_3", "label": "Occasion Type 3", "default": "Wedding" },
    { "type": "url", "id": "gift_url_3", "label": "Gift URL 3" },
    { "type": "text", "id": "occasion_type_4", "label": "Occasion Type 4", "default": "Graduation" },
    { "type": "url", "id": "gift_url_4", "label": "Gift URL 4" },
    { "type": "text", "id": "occasion_type_5", "label": "Occasion Type 5", "default": "Holiday" },
    { "type": "url", "id": "gift_url_5", "label": "Gift URL 5" },
    { "type": "text", "id": "default_gift_url", "label": "Default Gift URL", "default": "/collections/biscuits" }
  ],
  "presets": [{ "name": "Occasion Reminders" }]
}
{% endschema %}

<style>
.occasions-manager { max-width: 800px; margin: 0 auto; padding: 20px; }
.occasions-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(240px, 1fr)); gap: 16px; }
.occasion-item { border: 1px solid #e5e5e5; border-radius: 8px; padding: 16px; position: relative; }
.occasion-item:hover { border-color: #333; }
.occasion-type { font-size: 0.9rem; color: #666; margin: 4px 0; }
.edit-btn { position: absolute; top: 8px; right: 8px; background: none; border: none; font-size: 18px; cursor: pointer; }
.gift-btn { margin-top: 12px; padding: 8px 12px; background: #333; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 0.85rem; }
.add-btn { padding: 40px; border: 2px dashed #ccc; background: none; border-radius: 8px; cursor: pointer; }

/* Fixed modal positioning to only apply when visible, not override display:none */
.modal-overlay { 
  position: fixed; 
  top: 0; 
  left: 0; 
  width: 100vw; 
  height: 100vh; 
  background: rgba(0,0,0,0.6); 
  align-items: center; 
  justify-content: center; 
  z-index: 9999;
  backdrop-filter: blur(2px);
}

/* Only apply flex display when modal is actually shown */
.modal-overlay[style*="flex"] {
  display: flex !important;
}

.modal-content { 
  background: white; 
  border-radius: 12px; 
  padding: 32px; 
  max-width: 500px; 
  width: 90%; 
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 20px 60px rgba(0,0,0,0.3);
  position: relative;
  z-index: 10000;
}

.modal-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 24px; }
.modal-header h3 { margin: 0; font-size: 1.5rem; }
.modal-header button { background: none; border: none; font-size: 24px; cursor: pointer; padding: 4px; }

.greeting-box { background: #f8f8f8; padding: 20px; border-radius: 8px; margin-bottom: 24px; text-align: center; }
.form-group { margin-bottom: 20px; }
.form-group label { display: block; margin-bottom: 8px; font-weight: 600; color: #333; }
.form-group input, .form-group select { 
  width: 100%; 
  padding: 16px; 
  border: 2px solid #e5e5e5; 
  border-radius: 8px; 
  font-size: 16px;
  transition: border-color 0.2s;
}
.form-group input:focus, .form-group select:focus {
  outline: none;
  border-color: #333;
}

.add-submit-btn, .save-btn, .delete-btn { 
  padding: 16px 32px; 
  border: none; 
  border-radius: 8px; 
  cursor: pointer; 
  margin-right: 12px; 
  font-size: 16px;
  font-weight: 600;
  transition: all 0.2s;
}
.add-submit-btn, .save-btn { background: #333; color: white; }
.add-submit-btn:hover, .save-btn:hover { background: #555; }
.delete-btn { background: #dc3545; color: white; }
.delete-btn:hover { background: #c82333; }
.add-submit-btn:disabled { background: #ccc; cursor: not-allowed; }
</style>
